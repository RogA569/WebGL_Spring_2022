import { app, BrowserWindow, ipcMain } from 'electron';
import * as path from "path";


// be sure to upload StandardFirmataPlus to your board
// and run 'npm run rebuild' so johnny-five is compatible
const five = require('johnny-five');
const board = new five.Board({
  // name of the port your arduino is connected to
  // on mac this is probably "dev/tty/[something]"
  // on windows this is probably "COM[number]"
  port: "COM5",
  repl: false
});

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 1080,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: true,
      preload: path.join(__dirname, "./preload.js"),
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  board.on("ready", () => {
    let green = new five.Led(11);
    let red = new five.Led(9);
    // red.blink(1000);
    ipcMain.handle('write:LEDStatus', (event: any ,value: 1|0) => {
      // console.log(value)
      if (value === 0) {
        green.on();
        red.off();
      } else {
        green.off();
        red.on();
      }
    })

    let potentiometer = new five.Sensor({
      pin: "A0",
      frequency: 250,
      threshold: 100
    });
    potentiometer.on("change", function () {
      console.log(this.value);
      mainWindow.webContents.send('change-page', (this.value/1023.0) * 2.0 - 1.0);
    });
  })

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.